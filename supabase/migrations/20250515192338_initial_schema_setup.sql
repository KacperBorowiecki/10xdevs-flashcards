-- supabase/migrations/YYYYMMDDHHmmss_initial_schema_setup.sql
--
-- migration name: initial_schema_setup
-- description:   creates initial tables for 10x-cards application including source_texts, flashcards, 
--                ai_generation_events, and user_flashcard_spaced_repetition.
--                also sets up enum types, helper functions, triggers, indexes, and row level security.
-- affected_tables: auth.users (referenced), source_texts, flashcards, ai_generation_events, user_flashcard_spaced_repetition
-- special_considerations: this migration assumes the auth.users table is provided by supabase.
--                         rls policies are set up to restrict data access to the owning user.

-- ---- 0. preliminary definitions ----

-- enum types
-- defines allowed values for flashcard_source_enum.
create type flashcard_source_enum as enum (
    'manual', 
    'ai_suggestion'
);

-- defines allowed values for flashcard_status_enum.
create type flashcard_status_enum as enum (
    'active', 
    'pending_review', 
    'rejected'
);

-- helper functions
-- function to automatically update the updated_at timestamp on row modification.
create or replace function trigger_set_timestamp()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- ---- 1. tables ----

-- b. source_texts
-- stores the raw text provided by users for ai-powered flashcard generation.
create table source_texts (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    text_content text not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

-- enable rls for source_texts table
alter table source_texts enable row level security;

-- trigger for source_texts to update updated_at timestamp.
create trigger set_timestamp_source_texts
before update on source_texts
for each row
execute function trigger_set_timestamp();

-- c. flashcards
-- stores individual flashcards, whether created manually or generated by ai.
create table flashcards (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    source_text_id uuid references source_texts(id) on delete set null, -- null if manually created
    front_content varchar(500) not null,
    back_content varchar(1000) not null,
    source flashcard_source_enum not null,
    status flashcard_status_enum not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now(),

    constraint check_flashcard_source_and_status check (
        (source = 'manual' and status = 'active' and source_text_id is null) or
        (source = 'ai_suggestion' and source_text_id is not null and status in ('active', 'pending_review', 'rejected'))
    )
);

-- enable rls for flashcards table
alter table flashcards enable row level security;

-- trigger for flashcards to update updated_at timestamp.
create trigger set_timestamp_flashcards
before update on flashcards
for each row
execute function trigger_set_timestamp();

-- d. ai_generation_events
-- logs events related to ai flashcard generation, including costs and statistics.
create table ai_generation_events (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    source_text_id uuid not null references source_texts(id) on delete cascade, -- cascade if source text is deleted
    llm_model_used varchar(255), -- e.g., 'gpt-3.5-turbo'
    generated_cards_count integer not null default 0,
    accepted_cards_count integer not null default 0,
    rejected_cards_count integer not null default 0,
    cost numeric(10, 4), -- assuming cost with 4 decimal places
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now() -- to track updates to accepted/rejected counts
);

-- enable rls for ai_generation_events table
alter table ai_generation_events enable row level security;

-- trigger for ai_generation_events to update updated_at timestamp.
create trigger set_timestamp_ai_generation_events
before update on ai_generation_events
for each row
execute function trigger_set_timestamp();

-- e. user_flashcard_spaced_repetition
-- manages spaced repetition learning data for each user and flashcard.
create table user_flashcard_spaced_repetition (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    flashcard_id uuid not null references flashcards(id) on delete cascade,
    due_date timestamptz not null default now(),
    current_interval integer not null default 1, -- interval in days, or relevant unit for sr algorithm
    last_reviewed_at timestamptz,
    data_extra jsonb, -- for any additional data required by the sr algorithm
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now(),

    constraint uq_user_flashcard_repetition unique (user_id, flashcard_id)
);

-- enable rls for user_flashcard_spaced_repetition table
alter table user_flashcard_spaced_repetition enable row level security;

-- trigger for user_flashcard_spaced_repetition to update updated_at timestamp.
create trigger set_timestamp_user_flashcard_spaced_repetition
before update on user_flashcard_spaced_repetition
for each row
execute function trigger_set_timestamp();

-- ---- 3. indexes ----
-- these indexes improve query performance.

-- on source_texts:
-- index on user_id for faster filtering of source texts by user.
create index idx_source_texts_user_id on source_texts(user_id);

-- on flashcards:
-- index on user_id for faster filtering of flashcards by user.
create index idx_flashcards_user_id on flashcards(user_id);
-- index on source_text_id for faster lookups of flashcards related to a source text.
create index idx_flashcards_source_text_id on flashcards(source_text_id);
-- index on source for faster filtering by flashcard source.
create index idx_flashcards_source on flashcards(source);
-- index on status for faster filtering by flashcard status.
create index idx_flashcards_status on flashcards(status);

-- on ai_generation_events:
-- index on user_id for faster filtering of ai generation events by user.
create index idx_ai_generation_events_user_id on ai_generation_events(user_id);
-- index on source_text_id for faster lookups of ai generation events related to a source text.
create index idx_ai_generation_events_source_text_id on ai_generation_events(source_text_id);

-- on user_flashcard_spaced_repetition:
-- index on user_id for faster filtering of repetition data by user.
create index idx_user_flashcard_spaced_repetition_user_id on user_flashcard_spaced_repetition(user_id);
-- index on flashcard_id for faster lookups of repetition data related to a flashcard.
create index idx_user_flashcard_spaced_repetition_flashcard_id on user_flashcard_spaced_repetition(flashcard_id);
-- index on due_date for efficient querying of flashcards due for review.
create index idx_user_flashcard_spaced_repetition_due_date on user_flashcard_spaced_repetition(due_date);

-- ---- 4. postgresql row level security (rls) policies ----
-- rls policies ensure that users can only access and manage their own data.

-- policies for source_texts table
-- policy for select: authenticated user can only see their own source texts.
create policy "allow authenticated user to see their own source_texts"
on source_texts
for select
to authenticated
using (auth.uid() = user_id);

-- policy for insert: authenticated user can only insert source texts for themselves.
create policy "allow authenticated user to insert their own source_texts"
on source_texts
for insert
to authenticated
with check (auth.uid() = user_id);

-- policy for update: authenticated user can only update their own source texts.
create policy "allow authenticated user to update their own source_texts"
on source_texts
for update
to authenticated
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- policy for delete: authenticated user can only delete their own source texts.
create policy "allow authenticated user to delete their own source_texts"
on source_texts
for delete
to authenticated
using (auth.uid() = user_id);

-- policy for select: anon users cannot see any source texts.
create policy "disallow anon user to see any source_texts"
on source_texts
for select
to anon
using (false);

-- policy for insert: anon users cannot insert any source texts.
create policy "disallow anon user to insert any source_texts"
on source_texts
for insert
to anon
with check (false);

-- policy for update: anon users cannot update any source texts.
create policy "disallow anon user to update any source_texts"
on source_texts
for update
to anon
using (false)
with check (false);

-- policy for delete: anon users cannot delete any source texts.
create policy "disallow anon user to delete any source_texts"
on source_texts
for delete
to anon
using (false);


-- policies for flashcards table
-- policy for select: authenticated user can only see their own flashcards.
create policy "allow authenticated user to see their own flashcards"
on flashcards
for select
to authenticated
using (auth.uid() = user_id);

-- policy for insert: authenticated user can only insert flashcards for themselves.
create policy "allow authenticated user to insert their own flashcards"
on flashcards
for insert
to authenticated
with check (auth.uid() = user_id);

-- policy for update: authenticated user can only update their own flashcards.
create policy "allow authenticated user to update their own flashcards"
on flashcards
for update
to authenticated
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- policy for delete: authenticated user can only delete their own flashcards.
create policy "allow authenticated user to delete their own flashcards"
on flashcards
for delete
to authenticated
using (auth.uid() = user_id);

-- policy for select: anon users cannot see any flashcards.
create policy "disallow anon user to see any flashcards"
on flashcards
for select
to anon
using (false);

-- policy for insert: anon users cannot insert any flashcards.
create policy "disallow anon user to insert any flashcards"
on flashcards
for insert
to anon
with check (false);

-- policy for update: anon users cannot update any flashcards.
create policy "disallow anon user to update any flashcards"
on flashcards
for update
to anon
using (false)
with check (false);

-- policy for delete: anon users cannot delete any flashcards.
create policy "disallow anon user to delete any flashcards"
on flashcards
for delete
to anon
using (false);


-- policies for ai_generation_events table
-- policy for select: authenticated user can only see their own ai_generation_events.
create policy "allow authenticated user to see their own ai_generation_events"
on ai_generation_events
for select
to authenticated
using (auth.uid() = user_id);

-- policy for insert: authenticated user can only insert ai_generation_events for themselves.
create policy "allow authenticated user to insert their own ai_generation_events"
on ai_generation_events
for insert
to authenticated
with check (auth.uid() = user_id);

-- policy for update: authenticated user can only update their own ai_generation_events.
create policy "allow authenticated user to update their own ai_generation_events"
on ai_generation_events
for update
to authenticated
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- policy for delete: authenticated user can only delete their own ai_generation_events.
create policy "allow authenticated user to delete their own ai_generation_events"
on ai_generation_events
for delete
to authenticated
using (auth.uid() = user_id);

-- policy for select: anon users cannot see any ai_generation_events.
create policy "disallow anon user to see any ai_generation_events"
on ai_generation_events
for select
to anon
using (false);

-- policy for insert: anon users cannot insert any ai_generation_events.
create policy "disallow anon user to insert any ai_generation_events"
on ai_generation_events
for insert
to anon
with check (false);

-- policy for update: anon users cannot update any ai_generation_events.
create policy "disallow anon user to update any ai_generation_events"
on ai_generation_events
for update
to anon
using (false)
with check (false);

-- policy for delete: anon users cannot delete any ai_generation_events.
create policy "disallow anon user to delete any ai_generation_events"
on ai_generation_events
for delete
to anon
using (false);


-- policies for user_flashcard_spaced_repetition table
-- policy for select: authenticated user can only see their own user_flashcard_spaced_repetition data.
create policy "allow authenticated user to see their own user_flashcard_spaced_repetition"
on user_flashcard_spaced_repetition
for select
to authenticated
using (auth.uid() = user_id);

-- policy for insert: authenticated user can only insert user_flashcard_spaced_repetition data for themselves.
create policy "allow authenticated user to insert their own user_flashcard_spaced_repetition"
on user_flashcard_spaced_repetition
for insert
to authenticated
with check (auth.uid() = user_id);

-- policy for update: authenticated user can only update their own user_flashcard_spaced_repetition data.
create policy "allow authenticated user to update their own user_flashcard_spaced_repetition"
on user_flashcard_spaced_repetition
for update
to authenticated
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- policy for delete: authenticated user can only delete their own user_flashcard_spaced_repetition data.
create policy "allow authenticated user to delete their own user_flashcard_spaced_repetition"
on user_flashcard_spaced_repetition
for delete
to authenticated
using (auth.uid() = user_id);

-- policy for select: anon users cannot see any user_flashcard_spaced_repetition data.
create policy "disallow anon user to see any user_flashcard_spaced_repetition"
on user_flashcard_spaced_repetition
for select
to anon
using (false);

-- policy for insert: anon users cannot insert any user_flashcard_spaced_repetition data.
create policy "disallow anon user to insert any user_flashcard_spaced_repetition"
on user_flashcard_spaced_repetition
for insert
to anon
with check (false);

-- policy for update: anon users cannot update any user_flashcard_spaced_repetition data.
create policy "disallow anon user to update any user_flashcard_spaced_repetition"
on user_flashcard_spaced_repetition
for update
to anon
using (false)
with check (false);

-- policy for delete: anon users cannot delete any user_flashcard_spaced_repetition data.
create policy "disallow anon user to delete any user_flashcard_spaced_repetition"
on user_flashcard_spaced_repetition
for delete
to anon
using (false); 